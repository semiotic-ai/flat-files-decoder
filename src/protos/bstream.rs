// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `src/protos/bstream.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:sf.bstream.v1.BlockRequest)
pub struct BlockRequest {
    // message fields
    ///  Number of blocks we want to get in burst upon connection, on a best effort basis.
    ///  -1 means "LIB"
    ///  any other "-X" value means "start at block X"
    // @@protoc_insertion_point(field:sf.bstream.v1.BlockRequest.burst)
    pub burst: i64,
    ///  Type of blocks we're after here, is it 'ethereum' data, 'eos', etc.. The server can fail early
    ///  if he doesn't match the data he serves (services mismatch, etc..)
    // @@protoc_insertion_point(field:sf.bstream.v1.BlockRequest.content_type)
    pub content_type: ::std::string::String,
    // @@protoc_insertion_point(field:sf.bstream.v1.BlockRequest.order)
    pub order: ::protobuf::EnumOrUnknown<block_request::Order>,
    // @@protoc_insertion_point(field:sf.bstream.v1.BlockRequest.requester)
    pub requester: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:sf.bstream.v1.BlockRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BlockRequest {
    fn default() -> &'a BlockRequest {
        <BlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl BlockRequest {
    pub fn new() -> BlockRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "burst",
            |m: &BlockRequest| { &m.burst },
            |m: &mut BlockRequest| { &mut m.burst },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "content_type",
            |m: &BlockRequest| { &m.content_type },
            |m: &mut BlockRequest| { &mut m.content_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "order",
            |m: &BlockRequest| { &m.order },
            |m: &mut BlockRequest| { &mut m.order },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "requester",
            |m: &BlockRequest| { &m.requester },
            |m: &mut BlockRequest| { &mut m.requester },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BlockRequest>(
            "BlockRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BlockRequest {
    const NAME: &'static str = "BlockRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.burst = is.read_int64()?;
                },
                18 => {
                    self.content_type = is.read_string()?;
                },
                24 => {
                    self.order = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.requester = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.burst != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.burst);
        }
        if !self.content_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.content_type);
        }
        if self.order != ::protobuf::EnumOrUnknown::new(block_request::Order::UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(3, self.order.value());
        }
        if !self.requester.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.requester);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.burst != 0 {
            os.write_int64(1, self.burst)?;
        }
        if !self.content_type.is_empty() {
            os.write_string(2, &self.content_type)?;
        }
        if self.order != ::protobuf::EnumOrUnknown::new(block_request::Order::UNSPECIFIED) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.order))?;
        }
        if !self.requester.is_empty() {
            os.write_string(4, &self.requester)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BlockRequest {
        BlockRequest::new()
    }

    fn clear(&mut self) {
        self.burst = 0;
        self.content_type.clear();
        self.order = ::protobuf::EnumOrUnknown::new(block_request::Order::UNSPECIFIED);
        self.requester.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BlockRequest {
        static instance: BlockRequest = BlockRequest {
            burst: 0,
            content_type: ::std::string::String::new(),
            order: ::protobuf::EnumOrUnknown::from_i32(0),
            requester: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BlockRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BlockRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BlockRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `BlockRequest`
pub mod block_request {
    ///  Whether we can assume the data will come ordered, unless there is a chain reorganization.
    ///  mindreaders output ordered data, whereas relayers can output unordered data.
    ///  The server can fail early if the assumption of the caller cannot be fulfilled.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:sf.bstream.v1.BlockRequest.Order)
    pub enum Order {
        // @@protoc_insertion_point(enum_value:sf.bstream.v1.BlockRequest.Order.UNSPECIFIED)
        UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:sf.bstream.v1.BlockRequest.Order.ORDERED)
        ORDERED = 1,
        // @@protoc_insertion_point(enum_value:sf.bstream.v1.BlockRequest.Order.UNORDERED)
        UNORDERED = 2,
    }

    impl ::protobuf::Enum for Order {
        const NAME: &'static str = "Order";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Order> {
            match value {
                0 => ::std::option::Option::Some(Order::UNSPECIFIED),
                1 => ::std::option::Option::Some(Order::ORDERED),
                2 => ::std::option::Option::Some(Order::UNORDERED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Order] = &[
            Order::UNSPECIFIED,
            Order::ORDERED,
            Order::UNORDERED,
        ];
    }

    impl ::protobuf::EnumFull for Order {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("BlockRequest.Order").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Order {
        fn default() -> Self {
            Order::UNSPECIFIED
        }
    }

    impl Order {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Order>("BlockRequest.Order")
        }
    }
}

///  Cursor is used to generate a string cursor, currently being utilized in forkable
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:sf.bstream.v1.Cursor)
pub struct Cursor {
    // message fields
    // @@protoc_insertion_point(field:sf.bstream.v1.Cursor.block)
    pub block: ::protobuf::MessageField<BlockRef>,
    // @@protoc_insertion_point(field:sf.bstream.v1.Cursor.head_block)
    pub head_block: ::protobuf::MessageField<BlockRef>,
    // @@protoc_insertion_point(field:sf.bstream.v1.Cursor.lib)
    pub lib: ::protobuf::MessageField<BlockRef>,
    // @@protoc_insertion_point(field:sf.bstream.v1.Cursor.step)
    pub step: ::protobuf::EnumOrUnknown<ForkStep>,
    // special fields
    // @@protoc_insertion_point(special_field:sf.bstream.v1.Cursor.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Cursor {
    fn default() -> &'a Cursor {
        <Cursor as ::protobuf::Message>::default_instance()
    }
}

impl Cursor {
    pub fn new() -> Cursor {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BlockRef>(
            "block",
            |m: &Cursor| { &m.block },
            |m: &mut Cursor| { &mut m.block },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BlockRef>(
            "head_block",
            |m: &Cursor| { &m.head_block },
            |m: &mut Cursor| { &mut m.head_block },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BlockRef>(
            "lib",
            |m: &Cursor| { &m.lib },
            |m: &mut Cursor| { &mut m.lib },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "step",
            |m: &Cursor| { &m.step },
            |m: &mut Cursor| { &mut m.step },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Cursor>(
            "Cursor",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Cursor {
    const NAME: &'static str = "Cursor";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.block)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.head_block)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lib)?;
                },
                32 => {
                    self.step = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.head_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.lib.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.step != ::protobuf::EnumOrUnknown::new(ForkStep::STEP_UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(4, self.step.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.block.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.head_block.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.lib.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.step != ::protobuf::EnumOrUnknown::new(ForkStep::STEP_UNKNOWN) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.step))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Cursor {
        Cursor::new()
    }

    fn clear(&mut self) {
        self.block.clear();
        self.head_block.clear();
        self.lib.clear();
        self.step = ::protobuf::EnumOrUnknown::new(ForkStep::STEP_UNKNOWN);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Cursor {
        static instance: Cursor = Cursor {
            block: ::protobuf::MessageField::none(),
            head_block: ::protobuf::MessageField::none(),
            lib: ::protobuf::MessageField::none(),
            step: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Cursor {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Cursor").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Cursor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cursor {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:sf.bstream.v1.Block)
pub struct Block {
    // message fields
    // @@protoc_insertion_point(field:sf.bstream.v1.Block.number)
    pub number: u64,
    // @@protoc_insertion_point(field:sf.bstream.v1.Block.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:sf.bstream.v1.Block.previous_id)
    pub previous_id: ::std::string::String,
    // @@protoc_insertion_point(field:sf.bstream.v1.Block.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:sf.bstream.v1.Block.lib_num)
    pub lib_num: u64,
    // @@protoc_insertion_point(field:sf.bstream.v1.Block.payload_kind)
    pub payload_kind: ::protobuf::EnumOrUnknown<Protocol>,
    // @@protoc_insertion_point(field:sf.bstream.v1.Block.payload_version)
    pub payload_version: i32,
    // @@protoc_insertion_point(field:sf.bstream.v1.Block.payload_buffer)
    pub payload_buffer: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:sf.bstream.v1.Block.head_num)
    pub head_num: u64,
    // special fields
    // @@protoc_insertion_point(special_field:sf.bstream.v1.Block.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Block {
    fn default() -> &'a Block {
        <Block as ::protobuf::Message>::default_instance()
    }
}

impl Block {
    pub fn new() -> Block {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "number",
            |m: &Block| { &m.number },
            |m: &mut Block| { &mut m.number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Block| { &m.id },
            |m: &mut Block| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "previous_id",
            |m: &Block| { &m.previous_id },
            |m: &mut Block| { &mut m.previous_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &Block| { &m.timestamp },
            |m: &mut Block| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lib_num",
            |m: &Block| { &m.lib_num },
            |m: &mut Block| { &mut m.lib_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payload_kind",
            |m: &Block| { &m.payload_kind },
            |m: &mut Block| { &mut m.payload_kind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payload_version",
            |m: &Block| { &m.payload_version },
            |m: &mut Block| { &mut m.payload_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payload_buffer",
            |m: &Block| { &m.payload_buffer },
            |m: &mut Block| { &mut m.payload_buffer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "head_num",
            |m: &Block| { &m.head_num },
            |m: &mut Block| { &mut m.head_num },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Block>(
            "Block",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Block {
    const NAME: &'static str = "Block";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.number = is.read_uint64()?;
                },
                18 => {
                    self.id = is.read_string()?;
                },
                26 => {
                    self.previous_id = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                40 => {
                    self.lib_num = is.read_uint64()?;
                },
                48 => {
                    self.payload_kind = is.read_enum_or_unknown()?;
                },
                56 => {
                    self.payload_version = is.read_int32()?;
                },
                66 => {
                    self.payload_buffer = is.read_bytes()?;
                },
                72 => {
                    self.head_num = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.number != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.number);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        if !self.previous_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.previous_id);
        }
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.lib_num != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.lib_num);
        }
        if self.payload_kind != ::protobuf::EnumOrUnknown::new(Protocol::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(6, self.payload_kind.value());
        }
        if self.payload_version != 0 {
            my_size += ::protobuf::rt::int32_size(7, self.payload_version);
        }
        if !self.payload_buffer.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.payload_buffer);
        }
        if self.head_num != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.head_num);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.number != 0 {
            os.write_uint64(1, self.number)?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        if !self.previous_id.is_empty() {
            os.write_string(3, &self.previous_id)?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.lib_num != 0 {
            os.write_uint64(5, self.lib_num)?;
        }
        if self.payload_kind != ::protobuf::EnumOrUnknown::new(Protocol::UNKNOWN) {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.payload_kind))?;
        }
        if self.payload_version != 0 {
            os.write_int32(7, self.payload_version)?;
        }
        if !self.payload_buffer.is_empty() {
            os.write_bytes(8, &self.payload_buffer)?;
        }
        if self.head_num != 0 {
            os.write_uint64(9, self.head_num)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Block {
        Block::new()
    }

    fn clear(&mut self) {
        self.number = 0;
        self.id.clear();
        self.previous_id.clear();
        self.timestamp.clear();
        self.lib_num = 0;
        self.payload_kind = ::protobuf::EnumOrUnknown::new(Protocol::UNKNOWN);
        self.payload_version = 0;
        self.payload_buffer.clear();
        self.head_num = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Block {
        static instance: Block = Block {
            number: 0,
            id: ::std::string::String::new(),
            previous_id: ::std::string::String::new(),
            timestamp: ::protobuf::MessageField::none(),
            lib_num: 0,
            payload_kind: ::protobuf::EnumOrUnknown::from_i32(0),
            payload_version: 0,
            payload_buffer: ::std::vec::Vec::new(),
            head_num: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Block {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Block").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Block {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:sf.bstream.v1.BlockRef)
pub struct BlockRef {
    // message fields
    // @@protoc_insertion_point(field:sf.bstream.v1.BlockRef.num)
    pub num: u64,
    // @@protoc_insertion_point(field:sf.bstream.v1.BlockRef.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:sf.bstream.v1.BlockRef.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BlockRef {
    fn default() -> &'a BlockRef {
        <BlockRef as ::protobuf::Message>::default_instance()
    }
}

impl BlockRef {
    pub fn new() -> BlockRef {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "num",
            |m: &BlockRef| { &m.num },
            |m: &mut BlockRef| { &mut m.num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &BlockRef| { &m.id },
            |m: &mut BlockRef| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BlockRef>(
            "BlockRef",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BlockRef {
    const NAME: &'static str = "BlockRef";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.num = is.read_uint64()?;
                },
                18 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.num != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.num);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.num != 0 {
            os.write_uint64(1, self.num)?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BlockRef {
        BlockRef::new()
    }

    fn clear(&mut self) {
        self.num = 0;
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BlockRef {
        static instance: BlockRef = BlockRef {
            num: 0,
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BlockRef {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BlockRef").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BlockRef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockRef {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:sf.bstream.v1.GenericBlockIndex)
pub struct GenericBlockIndex {
    // message fields
    // @@protoc_insertion_point(field:sf.bstream.v1.GenericBlockIndex.kv)
    pub kv: ::std::vec::Vec<KeyToBitmap>,
    // special fields
    // @@protoc_insertion_point(special_field:sf.bstream.v1.GenericBlockIndex.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenericBlockIndex {
    fn default() -> &'a GenericBlockIndex {
        <GenericBlockIndex as ::protobuf::Message>::default_instance()
    }
}

impl GenericBlockIndex {
    pub fn new() -> GenericBlockIndex {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "kv",
            |m: &GenericBlockIndex| { &m.kv },
            |m: &mut GenericBlockIndex| { &mut m.kv },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenericBlockIndex>(
            "GenericBlockIndex",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenericBlockIndex {
    const NAME: &'static str = "GenericBlockIndex";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                34 => {
                    self.kv.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.kv {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.kv {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenericBlockIndex {
        GenericBlockIndex::new()
    }

    fn clear(&mut self) {
        self.kv.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenericBlockIndex {
        static instance: GenericBlockIndex = GenericBlockIndex {
            kv: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenericBlockIndex {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenericBlockIndex").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenericBlockIndex {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenericBlockIndex {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:sf.bstream.v1.KeyToBitmap)
pub struct KeyToBitmap {
    // message fields
    // @@protoc_insertion_point(field:sf.bstream.v1.KeyToBitmap.key)
    pub key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:sf.bstream.v1.KeyToBitmap.bitmap)
    pub bitmap: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:sf.bstream.v1.KeyToBitmap.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyToBitmap {
    fn default() -> &'a KeyToBitmap {
        <KeyToBitmap as ::protobuf::Message>::default_instance()
    }
}

impl KeyToBitmap {
    pub fn new() -> KeyToBitmap {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &KeyToBitmap| { &m.key },
            |m: &mut KeyToBitmap| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bitmap",
            |m: &KeyToBitmap| { &m.bitmap },
            |m: &mut KeyToBitmap| { &mut m.bitmap },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyToBitmap>(
            "KeyToBitmap",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeyToBitmap {
    const NAME: &'static str = "KeyToBitmap";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_bytes()?;
                },
                18 => {
                    self.bitmap = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if !self.bitmap.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.bitmap);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if !self.bitmap.is_empty() {
            os.write_bytes(2, &self.bitmap)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyToBitmap {
        KeyToBitmap::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.bitmap.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyToBitmap {
        static instance: KeyToBitmap = KeyToBitmap {
            key: ::std::vec::Vec::new(),
            bitmap: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeyToBitmap {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeyToBitmap").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeyToBitmap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyToBitmap {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:sf.bstream.v1.ForkStep)
pub enum ForkStep {
    // @@protoc_insertion_point(enum_value:sf.bstream.v1.ForkStep.STEP_UNKNOWN)
    STEP_UNKNOWN = 0,
    // @@protoc_insertion_point(enum_value:sf.bstream.v1.ForkStep.STEP_NEW)
    STEP_NEW = 1,
    // @@protoc_insertion_point(enum_value:sf.bstream.v1.ForkStep.STEP_UNDO)
    STEP_UNDO = 2,
    // @@protoc_insertion_point(enum_value:sf.bstream.v1.ForkStep.STEP_IRREVERSIBLE)
    STEP_IRREVERSIBLE = 4,
}

impl ::protobuf::Enum for ForkStep {
    const NAME: &'static str = "ForkStep";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ForkStep> {
        match value {
            0 => ::std::option::Option::Some(ForkStep::STEP_UNKNOWN),
            1 => ::std::option::Option::Some(ForkStep::STEP_NEW),
            2 => ::std::option::Option::Some(ForkStep::STEP_UNDO),
            4 => ::std::option::Option::Some(ForkStep::STEP_IRREVERSIBLE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ForkStep] = &[
        ForkStep::STEP_UNKNOWN,
        ForkStep::STEP_NEW,
        ForkStep::STEP_UNDO,
        ForkStep::STEP_IRREVERSIBLE,
    ];
}

impl ::protobuf::EnumFull for ForkStep {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ForkStep").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            ForkStep::STEP_UNKNOWN => 0,
            ForkStep::STEP_NEW => 1,
            ForkStep::STEP_UNDO => 2,
            ForkStep::STEP_IRREVERSIBLE => 3,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ForkStep {
    fn default() -> Self {
        ForkStep::STEP_UNKNOWN
    }
}

impl ForkStep {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ForkStep>("ForkStep")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:sf.bstream.v1.Protocol)
pub enum Protocol {
    // @@protoc_insertion_point(enum_value:sf.bstream.v1.Protocol.UNKNOWN)
    UNKNOWN = 0,
    // @@protoc_insertion_point(enum_value:sf.bstream.v1.Protocol.EOS)
    EOS = 1,
    // @@protoc_insertion_point(enum_value:sf.bstream.v1.Protocol.ETH)
    ETH = 2,
    // @@protoc_insertion_point(enum_value:sf.bstream.v1.Protocol.SOLANA)
    SOLANA = 3,
    // @@protoc_insertion_point(enum_value:sf.bstream.v1.Protocol.NEAR)
    NEAR = 4,
    // @@protoc_insertion_point(enum_value:sf.bstream.v1.Protocol.COSMOS)
    COSMOS = 5,
}

impl ::protobuf::Enum for Protocol {
    const NAME: &'static str = "Protocol";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Protocol> {
        match value {
            0 => ::std::option::Option::Some(Protocol::UNKNOWN),
            1 => ::std::option::Option::Some(Protocol::EOS),
            2 => ::std::option::Option::Some(Protocol::ETH),
            3 => ::std::option::Option::Some(Protocol::SOLANA),
            4 => ::std::option::Option::Some(Protocol::NEAR),
            5 => ::std::option::Option::Some(Protocol::COSMOS),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Protocol] = &[
        Protocol::UNKNOWN,
        Protocol::EOS,
        Protocol::ETH,
        Protocol::SOLANA,
        Protocol::NEAR,
        Protocol::COSMOS,
    ];
}

impl ::protobuf::EnumFull for Protocol {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Protocol").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Protocol {
    fn default() -> Self {
        Protocol::UNKNOWN
    }
}

impl Protocol {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Protocol>("Protocol")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18src/protos/bstream.proto\x12\rsf.bstream.v1\x1a\x1fgoogle/protobuf\
    /timestamp.proto\"\xd4\x01\n\x0cBlockRequest\x12\x14\n\x05burst\x18\x01\
    \x20\x01(\x03R\x05burst\x12!\n\x0ccontent_type\x18\x02\x20\x01(\tR\x0bco\
    ntentType\x127\n\x05order\x18\x03\x20\x01(\x0e2!.sf.bstream.v1.BlockRequ\
    est.OrderR\x05order\x12\x1c\n\trequester\x18\x04\x20\x01(\tR\trequester\
    \"4\n\x05Order\x12\x0f\n\x0bUNSPECIFIED\x10\0\x12\x0b\n\x07ORDERED\x10\
    \x01\x12\r\n\tUNORDERED\x10\x02\"\xc7\x01\n\x06Cursor\x12-\n\x05block\
    \x18\x01\x20\x01(\x0b2\x17.sf.bstream.v1.BlockRefR\x05block\x126\n\nhead\
    _block\x18\x02\x20\x01(\x0b2\x17.sf.bstream.v1.BlockRefR\theadBlock\x12)\
    \n\x03lib\x18\x03\x20\x01(\x0b2\x17.sf.bstream.v1.BlockRefR\x03lib\x12+\
    \n\x04step\x18\x04\x20\x01(\x0e2\x17.sf.bstream.v1.ForkStepR\x04step\"\
    \xca\x02\n\x05Block\x12\x16\n\x06number\x18\x01\x20\x01(\x04R\x06number\
    \x12\x0e\n\x02id\x18\x02\x20\x01(\tR\x02id\x12\x1f\n\x0bprevious_id\x18\
    \x03\x20\x01(\tR\npreviousId\x128\n\ttimestamp\x18\x04\x20\x01(\x0b2\x1a\
    .google.protobuf.TimestampR\ttimestamp\x12\x17\n\x07lib_num\x18\x05\x20\
    \x01(\x04R\x06libNum\x12:\n\x0cpayload_kind\x18\x06\x20\x01(\x0e2\x17.sf\
    .bstream.v1.ProtocolR\x0bpayloadKind\x12'\n\x0fpayload_version\x18\x07\
    \x20\x01(\x05R\x0epayloadVersion\x12%\n\x0epayload_buffer\x18\x08\x20\
    \x01(\x0cR\rpayloadBuffer\x12\x19\n\x08head_num\x18\t\x20\x01(\x04R\x07h\
    eadNum\",\n\x08BlockRef\x12\x10\n\x03num\x18\x01\x20\x01(\x04R\x03num\
    \x12\x0e\n\x02id\x18\x02\x20\x01(\tR\x02id\"Q\n\x11GenericBlockIndex\x12\
    *\n\x02kv\x18\x04\x20\x03(\x0b2\x1a.sf.bstream.v1.KeyToBitmapR\x02kvJ\
    \x04\x08\x01\x10\x02J\x04\x08\x02\x10\x03J\x04\x08\x03\x10\x04\"7\n\x0bK\
    eyToBitmap\x12\x10\n\x03key\x18\x01\x20\x01(\x0cR\x03key\x12\x16\n\x06bi\
    tmap\x18\x02\x20\x01(\x0cR\x06bitmap*\\\n\x08ForkStep\x12\x10\n\x0cSTEP_\
    UNKNOWN\x10\0\x12\x0c\n\x08STEP_NEW\x10\x01\x12\r\n\tSTEP_UNDO\x10\x02\
    \x12\x15\n\x11STEP_IRREVERSIBLE\x10\x04\"\x04\x08\x03\x10\x03\"\x04\x08\
    \x05\x10\x05*K\n\x08Protocol\x12\x0b\n\x07UNKNOWN\x10\0\x12\x07\n\x03EOS\
    \x10\x01\x12\x07\n\x03ETH\x10\x02\x12\n\n\x06SOLANA\x10\x03\x12\x08\n\
    \x04NEAR\x10\x04\x12\n\n\x06COSMOS\x10\x052L\n\x0bBlockStream\x12=\n\x06\
    Blocks\x12\x1b.sf.bstream.v1.BlockRequest\x1a\x14.sf.bstream.v1.Block0\
    \x01B7Z5github.com/streamingfast/pbgo/sf/bstream/v1;pbbstreamJ\x87\x1c\n\
    \x06\x12\x04\0\0a\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\0\x16\n\t\n\x02\x03\0\x12\x03\x04\0)\n\x08\n\x01\x08\x12\
    \x03\x06\0L\n\t\n\x02\x08\x0b\x12\x03\x06\0L\n\n\n\x02\x06\0\x12\x04\x08\
    \0\n\x01\n\n\n\x03\x06\0\x01\x12\x03\x08\x08\x13\n\x0b\n\x04\x06\0\x02\0\
    \x12\x03\t\x022\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\t\x06\x0c\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03\t\r\x19\n\x0c\n\x05\x06\0\x02\0\x06\x12\x03\
    \t$*\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\t+0\n\x1f\n\x02\x04\0\x12\x04\
    \x0e\0#\x012\x13\x20Version\x201\x20request\n\n\n\n\x03\x04\0\x01\x12\
    \x03\x0e\x08\x14\n\xa0\x01\n\x04\x04\0\x02\0\x12\x03\x12\x02\x12\x1a\x92\
    \x01\x20Number\x20of\x20blocks\x20we\x20want\x20to\x20get\x20in\x20burst\
    \x20upon\x20connection,\x20on\x20a\x20best\x20effort\x20basis.\n\x20-1\
    \x20means\x20\"LIB\"\n\x20any\x20other\x20\"-X\"\x20value\x20means\x20\"\
    start\x20at\x20block\x20X\"\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x12\
    \x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x12\x08\r\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x12\x10\x11\n\xb1\x01\n\x04\x04\0\x02\x01\x12\x03\x16\
    \x02\x1a\x1a\xa3\x01\x20Type\x20of\x20blocks\x20we're\x20after\x20here,\
    \x20is\x20it\x20'ethereum'\x20data,\x20'eos',\x20etc..\x20The\x20server\
    \x20can\x20fail\x20early\n\x20if\x20he\x20doesn't\x20match\x20the\x20dat\
    a\x20he\x20serves\x20(services\x20mismatch,\x20etc..)\n\n\x0c\n\x05\x04\
    \0\x02\x01\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x16\t\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x16\x18\x19\n\x88\x02\n\
    \x04\x04\0\x04\0\x12\x04\x1b\x02\x1f\x03\x1a\xf9\x01\x20Whether\x20we\
    \x20can\x20assume\x20the\x20data\x20will\x20come\x20ordered,\x20unless\
    \x20there\x20is\x20a\x20chain\x20reorganization.\n\x20mindreaders\x20out\
    put\x20ordered\x20data,\x20whereas\x20relayers\x20can\x20output\x20unord\
    ered\x20data.\n\x20The\x20server\x20can\x20fail\x20early\x20if\x20the\
    \x20assumption\x20of\x20the\x20caller\x20cannot\x20be\x20fulfilled.\n\n\
    \x0c\n\x05\x04\0\x04\0\x01\x12\x03\x1b\x07\x0c\n\r\n\x06\x04\0\x04\0\x02\
    \0\x12\x03\x1c\x04\x14\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\x1c\x04\
    \x0f\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03\x1c\x12\x13\n\r\n\x06\x04\
    \0\x04\0\x02\x01\x12\x03\x1d\x04\x10\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\
    \x12\x03\x1d\x04\x0b\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03\x1d\x0e\
    \x0f\n\r\n\x06\x04\0\x04\0\x02\x02\x12\x03\x1e\x04\x12\n\x0e\n\x07\x04\0\
    \x04\0\x02\x02\x01\x12\x03\x1e\x04\r\n\x0e\n\x07\x04\0\x04\0\x02\x02\x02\
    \x12\x03\x1e\x10\x11\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x20\x02\x12\n\x0c\
    \n\x05\x04\0\x02\x02\x06\x12\x03\x20\x02\x07\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03\x20\x08\r\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x20\x10\x11\
    \n\x0b\n\x04\x04\0\x02\x03\x12\x03\"\x02\x17\n\x0c\n\x05\x04\0\x02\x03\
    \x05\x12\x03\"\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\"\t\x12\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\"\x15\x16\n^\n\x02\x04\x01\x12\x04&\
    \0+\x01\x1aR\x20Cursor\x20is\x20used\x20to\x20generate\x20a\x20string\
    \x20cursor,\x20currently\x20being\x20utilized\x20in\x20forkable\n\n\n\n\
    \x03\x04\x01\x01\x12\x03&\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\x12\x03'\x02\
    \x15\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03'\x02\n\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03'\x0b\x10\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03'\x13\
    \x14\n\x0b\n\x04\x04\x01\x02\x01\x12\x03(\x02\x1a\n\x0c\n\x05\x04\x01\
    \x02\x01\x06\x12\x03(\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03(\x0b\
    \x15\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03(\x18\x19\n\x0b\n\x04\x04\
    \x01\x02\x02\x12\x03)\x02\x13\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03)\
    \x02\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03)\x0b\x0e\n\x0c\n\x05\x04\
    \x01\x02\x02\x03\x12\x03)\x11\x12\n\x0b\n\x04\x04\x01\x02\x03\x12\x03*\
    \x02\x14\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x03*\x02\n\n\x0c\n\x05\x04\
    \x01\x02\x03\x01\x12\x03*\x0b\x0f\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\
    \x03*\x12\x13\n\n\n\x02\x05\0\x12\x04-\09\x01\n\n\n\x03\x05\0\x01\x12\
    \x03-\x05\r\n\x0b\n\x04\x05\0\x02\0\x12\x03.\x02\x13\n\x0c\n\x05\x05\0\
    \x02\0\x01\x12\x03.\x02\x0e\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03.\x11\x12\
    \n[\n\x04\x05\0\x02\x01\x12\x030\x02\x0f\x1aN\x20Block\x20is\x20new\x20h\
    ead\x20block\x20of\x20the\x20chain,\x20that\x20is\x20linear\x20with\x20t\
    he\x20previous\x20block\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x030\x02\n\n\
    \x0c\n\x05\x05\0\x02\x01\x02\x12\x030\r\x0e\ne\n\x04\x05\0\x02\x02\x12\
    \x032\x02\x10\x1aX\x20Block\x20is\x20now\x20forked\x20and\x20should\x20b\
    e\x20undone,\x20it's\x20not\x20the\x20head\x20block\x20of\x20the\x20chai\
    n\x20anymore\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x032\x02\x0b\n\x0c\n\
    \x05\x05\0\x02\x02\x02\x12\x032\x0e\x0f\n$\n\x03\x05\0\x04\x12\x034\x02\
    \r\x1a\x18\x20Removed,\x20was\x20STEP_REDO\n\n\x0b\n\x04\x05\0\x04\0\x12\
    \x034\x0b\x0c\n\x0c\n\x05\x05\0\x04\0\x01\x12\x034\x0b\x0c\n\x0c\n\x05\
    \x05\0\x04\0\x02\x12\x034\x0b\x0c\n\x87\x01\n\x04\x05\0\x02\x03\x12\x036\
    \x02\x18\x1az\x20Block\x20is\x20now\x20irreversible\x20and\x20can\x20be\
    \x20committed\x20to\x20(finality\x20is\x20chain\x20specific,\x20see\x20c\
    hain\x20documentation\x20for\x20more\x20details)\n\n\x0c\n\x05\x05\0\x02\
    \x03\x01\x12\x036\x02\x13\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x036\x16\x17\
    \n'\n\x03\x05\0\x04\x12\x038\x02\x0e\x1a\x1b\x20Removed,\x20was\x20STEP_\
    STALLED\n\n\x0b\n\x04\x05\0\x04\x01\x12\x038\x0b\x0c\n\x0c\n\x05\x05\0\
    \x04\x01\x01\x12\x038\x0b\x0c\n\x0c\n\x05\x05\0\x04\x01\x02\x12\x038\x0b\
    \x0c\n*\n\x02\x04\x02\x12\x04>\0I\x012\x1e\x20General\x20response\x20and\
    \x20structs\n\n\n\n\x03\x04\x02\x01\x12\x03>\x08\r\n\x0b\n\x04\x04\x02\
    \x02\0\x12\x03?\x02\x14\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03?\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03?\t\x0f\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03?\x12\x13\n\x0b\n\x04\x04\x02\x02\x01\x12\x03@\x02\x10\n\x0c\
    \n\x05\x04\x02\x02\x01\x05\x12\x03@\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03@\t\x0b\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03@\x0e\x0f\n\
    \x0b\n\x04\x04\x02\x02\x02\x12\x03A\x02\x19\n\x0c\n\x05\x04\x02\x02\x02\
    \x05\x12\x03A\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03A\t\x14\n\
    \x0c\n\x05\x04\x02\x02\x02\x03\x12\x03A\x17\x18\n\x0b\n\x04\x04\x02\x02\
    \x03\x12\x03B\x02*\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03B\x02\x1b\n\
    \x0c\n\x05\x04\x02\x02\x03\x01\x12\x03B\x1c%\n\x0c\n\x05\x04\x02\x02\x03\
    \x03\x12\x03B()\n\x0b\n\x04\x04\x02\x02\x04\x12\x03C\x02\x15\n\x0c\n\x05\
    \x04\x02\x02\x04\x05\x12\x03C\x02\x08\n\x0c\n\x05\x04\x02\x02\x04\x01\
    \x12\x03C\t\x10\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03C\x13\x14\n\x0b\n\
    \x04\x04\x02\x02\x05\x12\x03E\x02\x1c\n\x0c\n\x05\x04\x02\x02\x05\x06\
    \x12\x03E\x02\n\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03E\x0b\x17\n\x0c\n\
    \x05\x04\x02\x02\x05\x03\x12\x03E\x1a\x1b\n\x0b\n\x04\x04\x02\x02\x06\
    \x12\x03F\x02\x1c\n\x0c\n\x05\x04\x02\x02\x06\x05\x12\x03F\x02\x07\n\x0c\
    \n\x05\x04\x02\x02\x06\x01\x12\x03F\x08\x17\n\x0c\n\x05\x04\x02\x02\x06\
    \x03\x12\x03F\x1a\x1b\n\x0b\n\x04\x04\x02\x02\x07\x12\x03G\x02\x1b\n\x0c\
    \n\x05\x04\x02\x02\x07\x05\x12\x03G\x02\x07\n\x0c\n\x05\x04\x02\x02\x07\
    \x01\x12\x03G\x08\x16\n\x0c\n\x05\x04\x02\x02\x07\x03\x12\x03G\x19\x1a\n\
    @\n\x04\x04\x02\x02\x08\x12\x03H\x02\x16\"3\x20when\x20set,\x20indicates\
    \x20the\x20current\x20server\x20head\x20block\n\n\x0c\n\x05\x04\x02\x02\
    \x08\x05\x12\x03H\x02\x08\n\x0c\n\x05\x04\x02\x02\x08\x01\x12\x03H\t\x11\
    \n\x0c\n\x05\x04\x02\x02\x08\x03\x12\x03H\x14\x15\n\n\n\x02\x04\x03\x12\
    \x04K\0N\x01\n\n\n\x03\x04\x03\x01\x12\x03K\x08\x10\n\x0b\n\x04\x04\x03\
    \x02\0\x12\x03L\x02\x11\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03L\x02\x08\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03L\t\x0c\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03L\x0f\x10\n\x0b\n\x04\x04\x03\x02\x01\x12\x03M\x02\x10\n\x0c\
    \n\x05\x04\x03\x02\x01\x05\x12\x03M\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03M\t\x0b\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03M\x0e\x0f\n\n\
    \n\x02\x05\x01\x12\x04P\0W\x01\n\n\n\x03\x05\x01\x01\x12\x03P\x05\r\n\
    \x0b\n\x04\x05\x01\x02\0\x12\x03Q\x02\x0e\n\x0c\n\x05\x05\x01\x02\0\x01\
    \x12\x03Q\x02\t\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03Q\x0c\r\n\x0b\n\x04\
    \x05\x01\x02\x01\x12\x03R\x02\n\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03R\
    \x02\x05\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03R\x08\t\n\x0b\n\x04\x05\
    \x01\x02\x02\x12\x03S\x02\n\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03S\x02\
    \x05\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03S\x08\t\n\x0b\n\x04\x05\x01\
    \x02\x03\x12\x03T\x02\r\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03T\x02\x08\
    \n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03T\x0b\x0c\n\x0b\n\x04\x05\x01\
    \x02\x04\x12\x03U\x02\x0b\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\x03U\x02\
    \x06\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03U\t\n\n\x0b\n\x04\x05\x01\
    \x02\x05\x12\x03V\x02\r\n\x0c\n\x05\x05\x01\x02\x05\x01\x12\x03V\x02\x08\
    \n\x0c\n\x05\x05\x01\x02\x05\x02\x12\x03V\x0b\x0c\n\n\n\x02\x04\x04\x12\
    \x04Y\0\\\x01\n\n\n\x03\x04\x04\x01\x12\x03Y\x08\x19\nf\n\x03\x04\x04\t\
    \x12\x03Z\x02\x11\"Z\x20eventually\x20add\x20a\x20small\x20bloomfilter\
    \x20at\x20the\x20beginning\x20of\x20the\x20file,\x20as\x20further\x20opt\
    imization\n\n\x0b\n\x04\x04\x04\t\0\x12\x03Z\x0b\x0c\n\x0c\n\x05\x04\x04\
    \t\0\x01\x12\x03Z\x0b\x0c\n\x0c\n\x05\x04\x04\t\0\x02\x12\x03Z\x0b\x0c\n\
    \x0b\n\x04\x04\x04\t\x01\x12\x03Z\r\x0e\n\x0c\n\x05\x04\x04\t\x01\x01\
    \x12\x03Z\r\x0e\n\x0c\n\x05\x04\x04\t\x01\x02\x12\x03Z\r\x0e\n\x0b\n\x04\
    \x04\x04\t\x02\x12\x03Z\x0f\x10\n\x0c\n\x05\x04\x04\t\x02\x01\x12\x03Z\
    \x0f\x10\n\x0c\n\x05\x04\x04\t\x02\x02\x12\x03Z\x0f\x10\n\x0b\n\x04\x04\
    \x04\x02\0\x12\x03[\x02\x1e\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03[\x02\n\
    \n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03[\x0b\x16\n\x0c\n\x05\x04\x04\x02\
    \0\x01\x12\x03[\x17\x19\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03[\x1c\x1d\n\
    \n\n\x02\x04\x05\x12\x04^\0a\x01\n\n\n\x03\x04\x05\x01\x12\x03^\x08\x13\
    \n\x0b\n\x04\x04\x05\x02\0\x12\x03_\x02\x10\n\x0c\n\x05\x04\x05\x02\0\
    \x05\x12\x03_\x02\x07\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03_\x08\x0b\n\
    \x0c\n\x05\x04\x05\x02\0\x03\x12\x03_\x0e\x0f\n\x0b\n\x04\x04\x05\x02\
    \x01\x12\x03`\x02\x13\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03`\x02\x07\n\
    \x0c\n\x05\x04\x05\x02\x01\x01\x12\x03`\x08\x0e\n\x0c\n\x05\x04\x05\x02\
    \x01\x03\x12\x03`\x11\x12b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(BlockRequest::generated_message_descriptor_data());
            messages.push(Cursor::generated_message_descriptor_data());
            messages.push(Block::generated_message_descriptor_data());
            messages.push(BlockRef::generated_message_descriptor_data());
            messages.push(GenericBlockIndex::generated_message_descriptor_data());
            messages.push(KeyToBitmap::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(ForkStep::generated_enum_descriptor_data());
            enums.push(Protocol::generated_enum_descriptor_data());
            enums.push(block_request::Order::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
